FILETOOL

Filetool is a filesystem explorer tool. It copies files and 
directories, deletes, moves, renames, etc.

This program is created with Qt. In order to compile it and 
run it you need Qt. You can find Qt in https://www.qt.io/download 

It is developed for practicing and learning Qt and not for real use in a filesystem.
 

I have run many tests and the program seems to be stable and reliable. Nevertheless,
I would advice caution because  it is  a program that changes the filesystem,
and in this commit or in some future commit it might have some bug. 
There are known bugs because this program is not finished. Evenmore I am writing this code
to learn writting code with Qt. So it is at best experimental. Thus, you should be careful if you use it. 
It is best if you first run it in a Virtual Machine with no important data, until you are 
certain that it works ok. 


It can be compiled with Qt in Windows or Linux. It works ok in both operating systems.

At this commit I still need to work on recycle, and perfect undo and redo. Undo and redo work ok, 
but the undo rename and undo mkdir and redo rename and redo mkdir have to be implemented. Rename works 
only in table view mode for some reason.

In a previous commit I perfected the undo-redo for copy and move. If you press cancel the copy or move 
action that was interupted  is not going into the undo and redo vectors. if some move or some copy 
fails it does not go into the undo and redo vectors. It only goes into the undo and redo vectors 
only if the action finishes with success. That way it is more difficult to lose data.
 
In another previous commit I perfected the multithreading of this program. Now it can do 
simultaneously many "copy" and "move" and "delete" actions  without problem and the undo and redo 
work ok with  those actions. (ie start a copy action of  a large directory then start a "cut" 
action of an other large directory and then several more. Or choose many files and directories for 
each action. Choose large directories so that the first actions do not finish before you add more 
actions. That way you can see that it executes many actions simultaneously.) 
I also rewrote part of the code to make it more readable.

In this commit I rewrote the delete command. Now it works better. Have in mind that delete is permanent 
and cannot be undone so be careful because what you delete is deleted permanently and cannot be undone.

In this commit I also rewrote the overwrite control for copy and cut (move) It is now implemented 
and tested. After many tests it seems that it works ok. Undo and redo work ok  with overwrite 
control and it is similar with the linux file manager. That means that it keeps the files that you chose
not to overwrite at target when you do undo and the original files you did not copy or move (chose to 
keep the target files at the target -so the source files reamained at source) when you do redo.

I also rewrote some parts of code (filaction subroutine etc. to make it more readable)
